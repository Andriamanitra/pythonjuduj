import random
from threading import Thread
from threading import Lock
from math import log2
from math import ceil

N = 26235947428953663183191
INITIAL_CHAINS = [[1,2,3,5,7], [1,2,3,6,7],
                 [1,2,4,5,7], [1,2,4,6,7],
                 [1,2,4,8,9], [1,2,3,5,10],
                 [1,2,3,6,9], [1,2,4,5,10],
                 [1,2,4,6,10], [1,2,4,8,9],
                 [1,2,3,6,12], [1,2,4,6,12],
                 [1,2,4,8,12], [1,2,4,8,16]]

def chain_to_links(ch):
    linky_chain = [1, 2]
    for i in range(2, len(ch)):
        for a in list(range(i)):
            for b in list(range(a+1)):
                if ch[a]+ch[b] == ch[i]:
                    linky_chain.append(Chainlink(linky_chain, a, b))
        #else:
        #    raise Exception("chain_to_links() received invalid chain!")
    return linky_chain


class Chainlink:
    def __init__(self, ch, p1, p2):
        try:
            self.__left = p1
            self.__right = p2
            self.__value = ch[p1] + ch[p2]
        except:
            print(p1, p2, len(ch))
            raise Exception("fug")
    def left(self):
        return self.__left
    def right(self):
        return self.__right
    def fix(self, r):
    # fixes the references when the preceding link
    # at index r is removed from chain
        if r < self.__left:
            self.__left -= 1
        if r < self.__right:
            self.__right -= 1
    def __int__(self):
        return self.__value
    def __mul__(self, other):
        return self.__value * other
    def __add__(self, other):
        return self.__value + other
    def __radd__(self, other):
        return self.__value + other
    def __eq__(self, other):
        return self.__value == other
    def __gt__(self, other):
        return self.__value > other
    def __lt__(self, other):
        return self.__value < other
    def __ge__(self, other):
        return self.__value >= other
    def __le__(self, other):
        return self.__value <= other
    def __str__(self):
        return str(self.__value)

class Chainfinder:
    def __init__(self, ch=[]):
        if not ch:
            self.chain = chain_to_links(random.choice(INITIAL_CHAINS))
        else:
            self.chain = ch
            return
        if random.randint(1,5) <= 3:
            i = len(self.chain)-1
            while self.chain[i]*2 <= N:
                self.double()
                i += 1
        self.chain = sorted(self.chain)
        r = random.randint(0,3)
        if r == 0:
            next_el = Chainlink(self.chain, self.last_i(), self.last_i()-1)
        elif r == 1:
            next_el = Chainlink(self.chain, self.last_i(), random.randint(0, self.last_i()))
        elif r == 2:
            halfway = len(self)//2 + 1
            next_el = Chainlink(self.chain, random.randint(0, halfway-1), random.randint(halfway, self.last_i()))
        elif r == 3:
            i = -2
            while -i < len(self) and self.last() + self.chain[i] > N:
                i -= 1
            next_el = Chainlink(self.chain, self.last_i(), len(self)+i)
        if next_el <= N and next_el not in self.chain:
            self.add(next_el)
        self.chain = self.repair_chain(self.chain)

    def crossover(self, other):
        r = random.randint(2, len(self)-1)
        child_chain = []
        for i in range(0, r):
            child_chain.append(self.chain[i])
        for i in range(r, len(other)):
            x = other.chain[i].left()
            y = other.chain[i].right()
            if x == len(child_chain) or y == len(child_chain):
                print(x, y, len(child_chain))
                print(child_chain[-1])
            child_chain.append(Chainlink(child_chain, x, y))
        child_chain = self.repair_chain(child_chain)
        return Chainfinder(child_chain)

    def two_point_crossover(self, other):
        r1 = random.randint(2, min(len(other)-3, len(self)-3))
        r2 = random.randint(r1, min(len(other)-2, len(self)-2))
        child_chain = []
        for i in range(0, r1):
            child_chain.append(self.chain[i])
        for i in range(r1, r2):
            x = other.chain[i].left()
            y = other.chain[i].right()
            child_chain.append(Chainlink(child_chain, x, y))
        for i in range(r2, len(self)):
            x = self.chain[i].left()
            y = self.chain[i].right()
            child_chain.append(Chainlink(child_chain, x, y))
        child_chain = self.repair_chain(child_chain)
        return Chainfinder(child_chain)

    def old_mutate(self, x=1):
        mutated_chain = [i for i in self.chain]
        for _ in range(x):
            r = random.randint(4, len(mutated_chain)-1)
            if random.randint(0,1):
                mutated_chain[r] = Chainlink(mutated_chain, r-1, r-2)
                mutated_chain = mutated_chain[:r+1]
            else:
                r2 = random.randint(2, r-1)
                mutated_chain[r] = Chainlink(mutated_chain, r-1, r2)
                mutated_chain = mutated_chain[:r+1]
            mutated_chain = self.repair_chain(mutated_chain)
        return Chainfinder(mutated_chain)

    def mutate(self, x=1):
        mutated_chain = [i for i in self.chain]
        for _ in range(x):
            r = random.randint(4, len(mutated_chain)-1)
            if random.randint(0,1):
                mutated_chain[r] = Chainlink(mutated_chain, r-1, r-2)
                mutated_chain = removed_from_chain(mutated_chain, r)
            else:
                r2 = random.randint(2, r-1)
                mutated_chain[r] = Chainlink(mutated_chain, r-1, r2)
                mutated_chain = removed_from_chain(mutated_chain, r)
            mutated_chain = self.repair_chain(mutated_chain)
        return Chainfinder(mutated_chain)

    def repair_chain(self, ch):
        ch = [i for i in ch if i <= N]
        ch = sorted(ch)
        for i in range(5, len(ch)):
            if ch[i] != ch[i].left() + ch[i].right():
                # let's just break the chain here i'm uncapable of
                # fixing this properly and it seems to work ok this way
                ch = ch[:i]
                break
        while ch[-1] != N:
            for i in range(len(ch)):
                if ch[i]+ch[-1] == N:
                    ch.append(Chainlink(ch, i, len(ch)-1))
                    return ch
            r = random.randint(0,2)
            if r == 0 and ch[-1]*2 <= N:
                while ch[-1]*2 <= N:
                    ch.append(Chainlink(ch, len(ch)-1, len(ch)-1))
            elif r == 1:
                ri = random.randint(0, len(ch)-1)
                if ch[-1]+ch[ri] <= N:
                    ch.append(Chainlink(ch, len(ch)-1, ri))
            else:
                i = -2
                while ch[-1]+ch[i] > N:
                    i -= 1
                ch.append(Chainlink(ch, len(ch)-1, len(ch)+i))

        return ch

    def add(self, x):
        if x not in self.chain:
            self.chain.append(x)
    def double(self):
        self.add(Chainlink(self.chain, self.last_i(), self.last_i()))
    def get_chain(self):
        return [int(i) for i in self.chain]
    def last(self):
        return self.chain[-1]
    def last_i(self):
        return len(self.chain)-1
    def fitness(self):
        return len(self.chain)-1
    def print_chain(self, include_l=False):
        if include_l:
            print("l="+str(self.fitness())+"\n[", end="")
        for link in self.chain[:-1]:
            print(link, end=", ")
        print(str(self.chain[-1])+"]")
    def __len__(self):
        return len(self.chain)
    def __gt__(self, other):
        return self.fitness() < other.fitness()
    def __lt__(self, other):
        return self.fitness() > other.fitness()
    def __ge__(self, other):
        return self.fitness() <= other.fitness()
    def __le__(self, other):
        return self.fitness() >= other.fitness()


def removed_from_chain(ch, r):
    if ch[r] > N:
    # repair function will do the fixing in this case
        return ch
    rems = [r]
    for i in range(r+1, len(ch)):
        if (ch[i].left() in rems) or (ch[i].right() in rems):
            rems.append(i)

    for i in reversed(rems[1:]):
        for j in range(i, len(ch)):
            ch[j].fix(i)
        ch.pop(i)
    return ch


def binary_representation(n):
    return bin(n)[2:]


def print_chain(ch):
    print("l("+str(ch[-1])+") = "+str(len(ch)-1) + ":\n" + str(ch))
    #print(binary_representation(ch[-1]))


def print_chain_l(ch):
    print("l("+str(ch[-1])+") = "+str(len(ch)-1))


def binary_method(n):
    chain = [1]
    for bit in binary_representation(n)[1:]: # first "1" needs to be ignored
        # double if "0"
        if bit == "0":
            chain.append(chain[-1]*2)
        # double and add if "1"
        elif bit == "1":
            chain.append(chain[-1]*2)
            chain.append(chain[-1]+1)
    return chain


def modulus_method(n, mod=4):
    intermediates = set()
    chain = set()
    chain.add(n)
    while n > 1:
        intermediates.add(n % mod)
        new_n = n - (n % mod)
        if new_n < mod:
            return sorted(list(set(chain).union(addition_sequence(intermediates))))
        else:
            n = new_n
        chain.add(n)
        while n % 2 == 0:
            if n//2 < mod:
                return sorted(list(set(chain).union(addition_sequence(intermediates))))
            n = n//2
            chain.add(n)


def window_method(n, window_size=4):
# I'm pretty sure this is actually analogous to modulus method
    b = binary_representation(n)
    i = 0
    c = False
    intermediates = []
    chain = []

    while  i < len(b):
        if not c:
            if b[i] == "1":
                j1 = 0+i
                c = True
            if chain:
                chain.append(chain[-1]*2)
        if c and i == j1 + window_size - 1:
            j2 = 0+i
            while b[j2] == "0":
                j2 = j2 - 1
            w = int(b[j1:j2+1], 2)
            intermediates.append(w)

            if not chain:
                chain.append(w)
            else:
                for it in range(j1, j2): chain.append(chain[-1]*2)
                chain.append(chain[-1]+w)
            for it in range(j2, i): chain.append(chain[-1]*2)

            c = False
        i += 1
    if c:
        i -= 1
        j2 = 0+i
        while b[j2] == "0":
            j2 = j2 - 1
        w = int(b[j1:j2+1], 2)
        intermediates.append(w)
        for it in range(j1, j2): chain.append(chain[-1]*2)
        chain.append(chain[-1]+w)
        for it in range(j2, i): chain.append(chain[-1]*2)
    print("Intermediates:")
    print(intermediates)
    print()
    intermediate_sequence = addition_sequence(intermediates)
    chain = sorted(list(set(chain).union(intermediate_sequence)))
    return chain


def number_of_1s(n):
    return binary_representation(n).count("1")


def lower_bound(n):
    return ceil(log2(n) + log2(number_of_1s(n)) - 2.13)


def addition_sequence(x):
    seq = set()
    for n in x:
        for m in binary_method(n):
            seq.add(m)
    return sorted(list(seq))


def verify_chain(n, ch):
    r = True
    if ch[-1] != n:
        print("CHAIN DOES NOT END IN n")
        r = False
    for x in range(len(ch)-1, 1, -1):
        for (i,j) in [(i,j) for i in range(x) for j in range(x)]:
            if ch[i]+ch[j] == ch[x]:
                break
        else:
            print("CHAIN NOT VALID AT INDEX "+str(x))
            r = False
    if ch[1] != 2:
        print("CHAIN NOT VALID AT INDEX 1")
        r = False
    if ch[0] != 1:
        print("CHAIN NOT VALID AT INDEX 0")
        r = False
    return r


def evolve_population(pop_id, monsters, mutex, pop_size, tourn_per_gen, mutations_per_gen, loser_dies_p, mutation_p, stagnation, target_fitness):
    tourn_size = 3 # only works with tournament size 3 for now
    gen = 0 # generation number
    lbm = 0 # last beneficial mutation
    alpha = max(monsters)
    best = max(monsters).fitness()

    while True:
        for _ in range(tourn_per_gen):
            tournament = []
            for _ in range(tourn_size):
                tournament.append(monsters.pop(random.randint(0, len(monsters)-1)))
            if random.random() < loser_dies_p:
                tournament.pop(tournament.index(min(tournament)))
            else:
                tournament.pop(random.randint(0, tourn_size-1))
            rand2 = random.randint(0, 1)
            if random.randint(0, 1):
                tournament.append(tournament[0].two_point_crossover(tournament[1]))
            else:
                tournament.append(tournament[0].crossover(tournament[1]))
            if random.random() < mutation_p:
                # USE OLD MUTATE CUZ I THINK IT'S MORE EFFICIENT
                #tournament[2] = tournament[2].mutate()
                tournament[2] = tournament[2].old_mutate()
            for tournament_survivor in tournament:
                monsters.append(tournament_survivor)
        for _ in range(mutations_per_gen):
            r = random.randint(0, len(monsters)-1)
            # USE OLD MUTATE CUZ I THINK IT'S MORE EFFICIENT
            #monsters[r] = monsters[r].mutate()
            monsters[r] = monsters[r].old_mutate()

        if max(monsters).fitness() <= best and max(monsters).get_chain() != alpha.get_chain():
            alpha = max(monsters)
            mutex.acquire()
            print(pop_id+" evolved: Gen #"+str(gen)+", min(l)="+str(alpha.fitness()))
            mutex.release()
            lbm = 0+gen
            best = alpha.fitness()
            if alpha.fitness() < 94:
                mutex.acquire()
                with open("chains.txt", "a") as the_file:
                    the_file.write(str(alpha.fitness())+":\n"+str(alpha.get_chain())+"\n\n")
                #alpha.print_chain()
                mutex.release()
            if not verify_chain(N, alpha.get_chain()):
                raise Exception("evolutionary method is broken")
            if alpha.fitness() <= target_fitness:
                mutex.acquire()
                print(pop_id+" reached target fitness, returning")
                mutex.release()
                return monsters
        gen += 1
        if stagnation != 0 and gen-lbm > stagnation:
            mutex.acquire()
            print(pop_id+" stagnant for "+str(stagnation)+" generations (min(l)="+
                str(alpha.fitness())+"), returning")
            mutex.release()
            return monsters


def generate_population(pop_size, mutex):
    mutex.acquire()
    print("Monster spawning started..")
    mutex.release()
    monsters = []
    for _ in range(pop_size):
        monsters.append(Chainfinder())
    mutex.acquire()
    print("Spawned", pop_size, "monsters!")
    mutex.release()
    return monsters


def elite_population(pop_size):
    print("spawning elites")
    elites = [[1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288, 1048576, 2097152, 2621440, 4718592, 7340032, 12058624, 19398656, 38797312, 77594624, 155189248, 310378496, 620756992, 1241513984, 2483027968, 4966055936, 9932111872, 19864223744, 39728447488, 79456894976, 158913789952, 317827579904, 635655159808, 1271310319616, 2542620639232, 5085241278464, 10170482556928, 20340965113856, 40681930227712, 81363860455424, 162727720910848, 325455441821696, 488183162732544, 976366325465088, 1952732650930176, 3905465301860352, 7810930603720704, 15621861207441408, 31243722414882816, 62487444829765632, 62487444829765648, 124974889659531296, 249949779319062592, 499899558638125184, 999799117276250368, 1999598234552500736, 3999196469105001472, 7998392938210002944, 15996785876420005888, 31993571752840011776, 63987143505680023552, 127974287011360047104, 255948574022720094208, 383922861034080141312, 639871435056800235520, 1023794296090880376832, 1663665731147680612352, 2687460027238560989184, 4351125758386241601536, 4351188245831071367184, 8702314004217312968720, 8702314004217312970768, 8702314004217312970770, 17404628008434625941540, 26106942012651938912310, 26234916299663298959414, 26235916098780575209782, 26235947342502990092598, 26235947423866850548022, 26235947428952091826486, 26235947428953333340470, 26235947428953643718966, 26235947428953663117622, 26235947428953663183158, 26235947428953663183190, 26235947428953663183191],
             [1, 2, 4, 8, 16, 32, 64, 128, 256, 384, 400, 784, 1184, 2368, 4736, 9472, 18944, 28416, 28417, 56833, 85250, 142083, 284166, 568332, 1136664, 2273328, 4546656, 9093312, 18186624, 36373248, 72746496, 145492992, 290985984, 581971968, 1163943936, 2327887872, 4655775744, 9311551488, 18623102976, 37246205952, 74492411904, 148984823808, 297969647616, 595939295232, 1191878590464, 2383757180928, 4767514361856, 9535028723712, 19070057447424, 38140114894848, 76280229789696, 152560459579392, 305120919158784, 610241838317568, 1220483676635136, 2440967353270272, 4881934706540544, 9763869413081088, 19527738826162176, 39055477652324352, 78110955304648704, 156221910609297408, 312443821218594816, 624887642437189632, 1249775284874379264, 2499550569748758528, 4999101139497517056, 9998202278995034112, 19996404557990068224, 39992809115980136448, 79985618231960272896, 159971236463920545792, 319942472927841091584, 639884945855682183168, 1279769891711364366336, 2559539783422728732672, 5119079566845457465344, 10238159133690914930688, 20476318267381829861376, 25595397834227287326720, 26235282780082969509888, 26235907667725406699520, 26235946723203059023872, 26235947333444897341440, 26235947409725127131136, 26235947428795184578560, 26235947428944169402368, 26235947428953480953856, 26235947428953626446848, 26235947428953662820096, 26235947428953663104262, 26235947428953663161095, 26235947428953663180039, 26235947428953663182407, 26235947428953663183191],
             [1, 2, 4, 5, 9, 14, 23, 37, 74, 148, 296, 592, 1184, 2368, 4736, 9472, 18944, 37888, 75776, 151552, 303104, 606208, 1212416, 2424832, 4849664, 9699328, 19398656, 38797312, 77594624, 155189248, 310378496, 620756992, 1241513984, 2483027968, 4966055936, 9932111872, 19864223744, 39728447488, 79456894976, 158913789952, 317827579904, 635655159808, 1271310319616, 2542620639232, 5085241278464, 10170482556928, 20340965113856, 40681930227712, 81363860455424, 162727720910848, 325455441821696, 650910883643392, 1301821767286784, 2603643534573568, 5207287069147136, 10414574138294272, 20829148276588544, 31243722414882816, 62487444829765632, 124974889659531264, 249949779319062528, 499899558638125056, 999799117276250112, 1999598234552500224, 3999196469105000448, 7998392938210000896, 15996785876420001792, 23995178814630002688, 23995178814630305792, 23995178814630305866, 47990357629260611732, 71985536443890917598, 119975894073151529330, 191961430517042446928, 191961430517042484816, 383922861034084969632, 767845722068169939264, 1535691444136339878528, 3071382888272679757056, 6142765776545359514112, 12285531553090719028224, 24571063106181438056448, 26106754550317777934976, 26226730444390929464306, 26234728837329139465202, 26235728636446415715314, 26235853611336075246578, 26235916098780905012210, 26235947342503319895026, 26235947423867180350450, 26235947428952421628914, 26235947428953663142898, 26235947428953663180786, 26235947428953663183154, 26235947428953663183191],
             [1, 2, 4, 8, 16, 32, 64, 128, 192, 200, 392, 592, 1184, 2368, 4736, 9472, 18944, 28416, 28417, 56833, 85250, 142083, 284166, 568332, 1136664, 2273328, 4546656, 9093312, 18186624, 36373248, 72746496, 145492992, 290985984, 581971968, 1163943936, 2327887872, 4655775744, 9311551488, 18623102976, 37246205952, 74492411904, 148984823808, 297969647616, 595939295232, 1191878590464, 2383757180928, 4767514361856, 9535028723712, 19070057447424, 38140114894848, 76280229789696, 152560459579392, 305120919158784, 610241838317568, 1220483676635136, 2440967353270272, 4881934706540544, 9763869413081088, 19527738826162176, 39055477652324352, 78110955304648704, 156221910609297408, 312443821218594816, 624887642437189632, 1249775284874379264, 2499550569748758528, 4999101139497517056, 9998202278995034112, 19996404557990068224, 39992809115980136448, 79985618231960272896, 159971236463920545792, 319942472927841091584, 639884945855682183168, 1279769891711364366336, 1279769896478878728192, 2559539792957757456384, 5119079585915514912768, 10238159171831029825536, 20476318343662059651072, 25595397929577574563840, 26235282875433256747008, 26235907763075693936640, 26235946818553346260992, 26235947428795184578560, 26235947428944169402368, 26235947428953480953856, 26235947428953626446848, 26235947428953662820096, 26235947428953663104262, 26235947428953663161095, 26235947428953663180039, 26235947428953663182407, 26235947428953663182999, 26235947428953663183191],
             [1, 2, 4, 8, 16, 32, 64, 128, 256, 384, 400, 784, 1184, 2368, 4736, 9472, 18944, 28416, 28417, 56833, 85250, 142083, 284166, 568332, 1136664, 2273328, 4546656, 9093312, 18186624, 36373248, 72746496, 145492992, 290985984, 581971968, 1163943936, 2327887872, 4655775744, 9311551488, 18623102976, 37246205952, 74492411904, 148984823808, 297969647616, 595939295232, 1191878590464, 2383757180928, 4767514361856, 9535028723712, 19070057447424, 38140114894848, 76280229789696, 152560459579392, 305120919158784, 610241838317568, 1220483676635136, 2440967353270272, 4881934706540544, 9763869413081088, 19527738826162176, 39055477652324352, 78110955304648704, 156221910609297408, 312443821218594816, 624887642437189632, 1249775284874379264, 2499550569748758528, 4999101139497517056, 9998202278995034112, 19996404557990068224, 39992809115980136448, 79985618231960272896, 159971236463920545792, 319942472927841091584, 639884945855682183168, 639884945855682185536, 1279769891711364368704, 2559539783422728737408, 5119079566845457474816, 10238159133690914949632, 20476318267381829899264, 25595397834227287374080, 26235282780082969559616, 26235907667725406749248, 26235946723203059073600, 26235947333444897391168, 26235947409725127180864, 26235947428795184628288, 26235947428944169452096, 26235947428953481003584, 26235947428953626496576, 26235947428953662869824, 26235947428953663153990, 26235947428953663182407, 26235947428953663183191],
             [1, 2, 4, 8, 16, 32, 64, 128, 256, 384, 400, 784, 1184, 2368, 4736, 9472, 18944, 28416, 28417, 56833, 85250, 142083, 284166, 568332, 1136664, 2273328, 4546656, 9093312, 18186624, 36373248, 72746496, 145492992, 290985984, 581971968, 1163943936, 2327887872, 4655775744, 9311551488, 18623102976, 37246205952, 74492411904, 148984823808, 297969647616, 595939295232, 1191878590464, 2383757180928, 4767514361856, 9535028723712, 19070057447424, 38140114894848, 76280229789696, 152560459579392, 305120919158784, 610241838317568, 1220483676635136, 2440967353270272, 4881934706540544, 9763869413081088, 19527738826162176, 39055477652324352, 78110955304648704, 156221910609297408, 312443821218594816, 624887642437189632, 1249775284874379264, 2499550569748758528, 4999101139497517056, 9998202278995034112, 19996404557990068224, 39992809115980136448, 79985618231960272896, 159971236463920545792, 319942472927841091584, 639884945855682183168, 1279769891711364366336, 2559539783422728732672, 2559539783422765105920, 5119079566845493838592, 5119079585915551286016, 10238159171831102572032, 20476318343662205144064, 25595397929577756430080, 26235282875433438613248, 26235907763075875802880, 26235946818553528127232, 26235947428795366444800, 26235947428944351268608, 26235947428953662820096, 26235947428953663104262, 26235947428953663161095, 26235947428953663180039, 26235947428953663182407, 26235947428953663183191],
             [1, 2, 4, 8, 16, 32, 64, 128, 192, 200, 392, 592, 1184, 2368, 4736, 9472, 18944, 28416, 28417, 56833, 85250, 142083, 284166, 568332, 1136664, 2273328, 4546656, 9093312, 18186624, 36373248, 72746496, 145492992, 290985984, 581971968, 1163943936, 2327887872, 4655775744, 9311551488, 18623102976, 37246205952, 74492411904, 148984823808, 297969647616, 595939295232, 1191878590464, 2383757180928, 4767514361856, 9535028723712, 19070057447424, 38140114894848, 76280229789696, 152560459579392, 305120919158784, 610241838317568, 1220483676635136, 2440967353270272, 4881934706540544, 9763869413081088, 19527738826162176, 39055477652324352, 78110955304648704, 156221910609297408, 312443821218594816, 624887642437189632, 1249775284874379264, 2499550569748758528, 4999101139497517056, 9998202278995034112, 19996404557990068224, 39992809115980136448, 79985618231960272896, 159971236463920545792, 319942472927841091584, 639884945855682183168, 1279769891711364366336, 1279769896478878728192, 2559539792957757456384, 5119079585915514912768, 7678619378873272369152, 12797698964788787281920, 12797698964788787282312, 25595397929577574564624, 26235282875433256747792, 26235907763075693937424, 26235946818553346261776, 26235947428795184579344, 26235947428944169403152, 26235947428953480954640, 26235947428953626447632, 26235947428953662820880, 26235947428953663105046, 26235947428953663161879, 26235947428953663180823, 26235947428953663183191],
             [1, 2, 4, 8, 16, 32, 64, 128, 192, 208, 400, 592, 1184, 2368, 4736, 9472, 18944, 37888, 75776, 151552, 303104, 606208, 1212416, 2424832, 4849664, 9699328, 19398656, 38797312, 77594624, 155189248, 310378496, 620756992, 1241513984, 2483027968, 4966055936, 9932111872, 19864223744, 39728447488, 79456894976, 158913789952, 317827579904, 635655159808, 1271310319616, 2542620639232, 5085241278464, 10170482556928, 20340965113856, 40681930227712, 81363860455424, 162727720910848, 325455441821696, 650910883643392, 1301821767286784, 1952732650930176, 3905465301860352, 7810930603720704, 15621861207441408, 31243722414882816, 62487444829765632, 93731167244648448, 93731167244649632, 187462334489299264, 374924668978598528, 749849337957197056, 1499698675914394112, 2999397351828788224, 5998794703657576448, 11997589407315152896, 23995178814630305792, 24088909981874955424, 48084088796505261216, 96168177593010522432, 192336355186021044864, 384672710372042089728, 769345420744084179456, 1538690841488168358912, 3077381682976336717824, 6154763365952673435648, 12309526731905346871296, 24619053463810693742592, 26157744305298862101504, 26205828394095367362720, 26205828399180608641184, 26229917309162483596608, 26235916103866141173056, 26235947347588556055872, 26235947428952416511296, 26235947428953658025280, 26235947428953662874944, 26235947428953663178048, 26235947428953663182784, 26235947428953663183184, 26235947428953663183188, 26235947428953663183190, 26235947428953663183191],
             [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 8208, 16400, 24608, 25632, 50240, 75872, 151744, 303488, 606976, 1213952, 2427904, 4855808, 9711616, 19423232, 38846464, 77692928, 155385856, 310771712, 621543424, 1243086848, 2486173696, 4972347392, 9944694784, 19889389568, 39778779136, 59668168704, 119336337408, 238672674816, 477345349632, 954690699264, 1909381398528, 3818762797056, 7637525594112, 15275051188224, 30550102376448, 61100204752896, 122200409505792, 244400819011584, 488801638023168, 977603276046336, 1955206552092672, 3910413104185344, 7820826208370688, 15641652416741376, 31283304833482752, 62566609666965504, 125133219333931008, 250266438667862016, 500532877335724032, 750799316003586048, 1501598632007172096, 3003197264014344192, 6006394528028688384, 12012789056057376768, 24025578112114753536, 48051156224229507072, 96102312448459014144, 192204624896918028288, 288306937345377042432, 480511562242295070720, 480511562242295070721, 961023124484590141442, 1922046248969180282884, 3844092497938360565768, 7688184995876721131536, 15376369991753442263072, 23064554987630163394608, 24986601236599343677492, 25947624361083933818934, 26235931298429310861366, 26235946940081727602742, 26235947428883365625910, 26235947428943033794614, 26235947428952978489398, 26235947428953600032822, 26235947428953638879286, 26235947428953658302518, 26235947428953663158326, 26235947428953663182934, 26235947428953663183190, 26235947428953663183191],
             [1, 2, 4, 8, 16, 32, 64, 128, 192, 208, 400, 592, 1184, 2368, 4736, 9472, 18944, 37888, 75776, 151552, 303104, 606208, 1212416, 2424832, 4849664, 9699328, 19398656, 38797312, 77594624, 155189248, 310378496, 620756992, 1241513984, 2483027968, 4966055936, 9932111872, 19864223744, 39728447488, 79456894976, 158913789952, 317827579904, 635655159808, 1271310319616, 2542620639232, 5085241278464, 10170482556928, 20340965113856, 40681930227712, 81363860455424, 162727720910848, 325455441821696, 650910883643392, 1301821767286784, 1952732650930176, 3905465301860352, 7810930603720704, 15621861207441408, 31243722414882816, 62487444829765632, 93731167244648448, 93731167244649632, 187462334489299264, 374924668978598528, 749849337957197056, 1499698675914394112, 2999397351828788224, 3093128519073437856, 6186257038146875712, 12372514076293751424, 24745028152587502848, 49490056305175005696, 98980112610350011392, 197960225220700022784, 395920450441400045568, 791840900882800091136, 1583681801765600182272, 3167363603531200364544, 6334727207062400729088, 12669454414124801458176, 25338908828249602916352, 26130749729132403007488, 26229729841742753018880, 26235916098780899894592, 26235947342503314777408, 26235947423867175232832, 26235947428952416511296, 26235947428953658025280, 26235947428953662874944, 26235947428953663178048, 26235947428953663182784, 26235947428953663183184, 26235947428953663183188, 26235947428953663183190, 26235947428953663183191],
             [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 8208, 16400, 24608, 25632, 50240, 75872, 151744, 303488, 606976, 1213952, 2427904, 4855808, 9711616, 19423232, 38846464, 77692928, 155385856, 310771712, 621543424, 1243086848, 2486173696, 4972347392, 9944694784, 19889389568, 29834084352, 59668168704, 119336337408, 238672674816, 477345349632, 954690699264, 1909381398528, 3818762797056, 7637525594112, 15275051188224, 30550102376448, 61100204752896, 122200409505792, 244400819011584, 488801638023168, 977603276046336, 1955206552092672, 3910413104185344, 7820826208370688, 15641652416741376, 31283304833482752, 62566609666965504, 125133219333931008, 250266438667862016, 500532877335724032, 750799316003586048, 1501598632007172096, 3003197264014344192, 6006394528028688384, 12012789056057376768, 24025578112114753536, 48051156224229507072, 96102312448459014144, 192204624896918028288, 288306937345377042432, 480511562242295070720, 480511562242295070721, 961023124484590141442, 1922046248969180282884, 2883069373453770424326, 5766138746907540848652, 11532277493815081697304, 23064554987630163394608, 25947624361083933818934, 26235931298429310861366, 26235946940081727602742, 26235947428883365625910, 26235947428943033794614, 26235947428952978489398, 26235947428953600032822, 26235947428953638879286, 26235947428953658302518, 26235947428953663158326, 26235947428953663182934, 26235947428953663183190, 26235947428953663183191],
             [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 6144, 6400, 12544, 18944, 37888, 75776, 151552, 303104, 606208, 1212416, 2424832, 4849664, 9699328, 19398656, 38797312, 77594624, 155189248, 310378496, 620756992, 1241513984, 2483027968, 4966055936, 9932111872, 19864223744, 39728447488, 79456894976, 158913789952, 317827579904, 635655159808, 1271310319616, 2542620639232, 5085241278464, 10170482556928, 20340965113856, 40681930227712, 81363860455424, 162727720910848, 325455441821696, 650910883643392, 1301821767286784, 2603643534573568, 3905465301860352, 7810930603720704, 15621861207441408, 31243722414882816, 62487444829765632, 124974889659531264, 124974889659531266, 249949779319062532, 499899558638125064, 999799117276250128, 1999598234552500256, 3999196469105000512, 7998392938210001024, 15996785876420002048, 31993571752840004096, 63987143505680008192, 127974287011360016384, 191961430517040024576, 319935717528400040960, 319935717528400116736, 639871435056800233472, 1279742870113600466944, 1279742870113755656192, 2559485740227356123136, 5118971480454712246272, 5119002724177127129088, 10237974204631839375360, 15356976928808966504448, 25594951133440805879808, 26234822568497606113280, 26235822367614882363408, 26235947342504541894674, 26235947423868402350098, 26235947428953643628562, 26235947428953663027218, 26235947428953663178770, 26235947428953663182866, 26235947428953663183122, 26235947428953663183186, 26235947428953663183190, 26235947428953663183191],
             [1, 2, 4, 8, 16, 32, 64, 128, 192, 208, 400, 592, 1184, 2368, 4736, 9472, 18944, 37888, 75776, 151552, 303104, 606208, 1212416, 2424832, 4849664, 9699328, 19398656, 38797312, 77594624, 155189248, 310378496, 620756992, 1241513984, 2483027968, 4966055936, 9932111872, 19864223744, 39728447488, 79456894976, 158913789952, 317827579904, 635655159808, 1271310319616, 2542620639232, 5085241278464, 10170482556928, 20340965113856, 40681930227712, 81363860455424, 162727720910848, 325455441821696, 650910883643392, 1301821767286784, 1952732650930176, 3905465301860352, 7810930603720704, 15621861207441408, 31243722414882816, 62487444829765632, 93731167244648448, 93731167244649632, 187462334489299264, 374924668978598528, 749849337957197056, 1499698675914394112, 2999397351828788224, 3093128519073437856, 6186257038146875712, 12372514076293751424, 24745028152587502848, 49490056305175005696, 98980112610350011392, 197960225220700022784, 395920450441400045568, 791840900882800091136, 791840900882800394240, 1583681801765600485376, 3167363603531200970752, 6334727207062401941504, 12669454414124803883008, 25338908828249607766016, 26130749729132408160256, 26229729841742758171648, 26235916098780905047360, 26235947342503319930176, 26235947423867180385600, 26235947428952421664064, 26235947428953663178048, 26235947428953663182784, 26235947428953663183184, 26235947428953663183188, 26235947428953663183190, 26235947428953663183191],
             [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 8208, 16400, 24608, 25632, 50240, 75872, 151744, 303488, 606976, 1213952, 2427904, 4855808, 9711616, 19423232, 38846464, 77692928, 155385856, 310771712, 621543424, 1243086848, 2486173696, 4972347392, 9944694784, 19889389568, 39778779136, 59668168704, 119336337408, 238672674816, 477345349632, 954690699264, 1909381398528, 3818762797056, 7637525594112, 15275051188224, 30550102376448, 61100204752896, 122200409505792, 244400819011584, 488801638023168, 977603276046336, 1955206552092672, 3910413104185344, 7820826208370688, 15641652416741376, 31283304833482752, 62566609666965504, 125133219333931008, 250266438667862016, 500532877335724032, 750799316003586048, 1501598632007172096, 3003197264014344192, 6006394528028688384, 12012789056057376768, 24025578112114753536, 48051156224229507072, 96102312448459014144, 192204624896918028288, 288306937345377042432, 480511562242295070720, 480511562242295070721, 961023124484590141442, 1922046248969180282884, 2883069373453770424326, 2883069373453780135942, 5766138746907550560268, 8649208120361330696210, 8649208120371275390994, 17298416240742550781988, 25947624361113826172982, 26235931298459203215414, 26235946940111619956790, 26235947428913257979958, 26235947428913262835766, 26235947428953041614902, 26235947428953663158326, 26235947428953663182934, 26235947428953663183190, 26235947428953663183191],
             [1, 2, 4, 5, 9, 14, 23, 37, 74, 148, 296, 592, 1184, 2368, 4736, 9472, 18944, 37888, 75776, 151552, 303104, 606208, 1212416, 2424832, 4849664, 9699328, 19398656, 38797312, 77594624, 155189248, 310378496, 620756992, 1241513984, 2483027968, 4966055936, 9932111872, 19864223744, 39728447488, 79456894976, 158913789952, 317827579904, 635655159808, 1271310319616, 2542620639232, 5085241278464, 10170482556928, 20340965113856, 40681930227712, 81363860455424, 162727720910848, 325455441821696, 488183162732544, 976366325465088, 1952732650930176, 3905465301860352, 7810930603720704, 11716395905581056, 11716395905581352, 23432791811162408, 46865583622324816, 93731167244649632, 187462334489299264, 374924668978598528, 749849337957197056, 1499698675914394112, 2999397351828788224, 5998794703657576448, 11997589407315152896, 23995178814630305792, 47990357629260611584, 95980715258521223168, 191961430517042446336, 383922861034084892672, 767845722068169785344, 1535691444136339570688, 3071382888272679141376, 6142765776545358282752, 12285531553090716565504, 24571063106181433131008, 26106754550317772701696, 26202735265576293924864, 26226730444390924230656, 26232729239094581807104, 26235728636446410595328, 26235916098780899894592, 26235939531572711057000, 26235947342503314777704, 26235947423867175233128, 26235947428952416511592, 26235947428953658025576, 26235947428953662875240, 26235947428953663178344, 26235947428953663183080, 26235947428953663183154, 26235947428953663183191],
             [1, 2, 4, 5, 9, 14, 23, 37, 74, 148, 296, 592, 1184, 2368, 4736, 9472, 18944, 37888, 75776, 151552, 303104, 606208, 1212416, 2424832, 4849664, 9699328, 19398656, 38797312, 77594624, 155189248, 310378496, 620756992, 1241513984, 2483027968, 4966055936, 9932111872, 19864223744, 39728447488, 79456894976, 158913789952, 317827579904, 635655159808, 1271310319616, 2542620639232, 5085241278464, 10170482556928, 20340965113856, 40681930227712, 81363860455424, 162727720910848, 325455441821696, 488183162732544, 976366325465088, 1952732650930176, 3905465301860352, 7810930603720704, 11716395905581056, 11716395905581352, 23432791811162408, 46865583622324816, 93731167244649632, 187462334489299264, 374924668978598528, 749849337957197056, 1499698675914394112, 2999397351828788224, 5998794703657576448, 11997589407315152896, 23995178814630305792, 47990357629260611584, 95980715258521223168, 96355639927499821696, 192711279854999643392, 385422559709999286784, 770845119419998573568, 1541690238839997147136, 3083380477679994294272, 6166760955359988588544, 12333521910719977177088, 24667043821439954354176, 26208734060279951501312, 26232729239094581807104, 26235728636446410595328, 26235916098780899894592, 26235939531572711057000, 26235947342503314777704, 26235947423867175233128, 26235947428952416511592, 26235947428952416511666, 26235947428953658025650, 26235947428953662875314, 26235947428953663178418, 26235947428953663183154, 26235947428953663183191],
             [1, 2, 4, 5, 9, 14, 23, 37, 74, 148, 296, 592, 1184, 2368, 4736, 9472, 18944, 37888, 75776, 151552, 303104, 606208, 1212416, 2424832, 4849664, 9699328, 19398656, 38797312, 77594624, 155189248, 310378496, 620756992, 1241513984, 2483027968, 4966055936, 9932111872, 19864223744, 39728447488, 79456894976, 158913789952, 317827579904, 635655159808, 1271310319616, 2542620639232, 5085241278464, 10170482556928, 20340965113856, 40681930227712, 81363860455424, 162727720910848, 325455441821696, 488183162732544, 976366325465088, 1952732650930176, 3905465301860352, 7810930603720704, 11716395905581056, 11716395905581352, 23432791811162408, 46865583622324816, 93731167244649632, 187462334489299264, 374924668978598528, 749849337957197056, 1499698675914394112, 2999397351828788224, 5998794703657576448, 11997589407315152896, 23995178814630305792, 26994576166459094016, 50989754981089399808, 101979509962178799616, 203959019924357599232, 407918039848715198464, 815836079697430396928, 1631672159394860793856, 3263344318789721587712, 6526688637579443175424, 13053377275158886350848, 26106754550317772701696, 26208734060279951501312, 26235728636446410595328, 26235916098780899894592, 26235939531572711057000, 26235947342503314777704, 26235947423867175233128, 26235947428952416511592, 26235947428953658025576, 26235947428953662875240, 26235947428953663178344, 26235947428953663183080, 26235947428953663183154, 26235947428953663183191],
             [1, 2, 4, 5, 9, 14, 23, 37, 74, 148, 296, 592, 1184, 2368, 4736, 9472, 18944, 37888, 75776, 151552, 303104, 606208, 1212416, 2424832, 4849664, 9699328, 19398656, 38797312, 77594624, 155189248, 310378496, 620756992, 1241513984, 2483027968, 4966055936, 9932111872, 19864223744, 39728447488, 79456894976, 158913789952, 317827579904, 635655159808, 1271310319616, 2542620639232, 5085241278464, 10170482556928, 20340965113856, 40681930227712, 81363860455424, 162727720910848, 244091581366272, 488183162732544, 976366325465088, 1952732650930176, 2929098976395264, 2929098976395338, 5858197952790602, 11716395905581204, 23432791811162408, 46865583622324816, 93731167244649632, 187462334489299264, 374924668978598528, 749849337957197056, 1499698675914394112, 2999397351828788224, 5998794703657576448, 11997589407315152896, 23995178814630305792, 47990357629260611584, 95980715258521223168, 191961430517042446336, 383922861034084892672, 767845722068169785344, 1535691444136339570688, 3071382888272679141376, 6142765776545358282752, 12285531553090716565504, 24571063106181433131008, 26106754550317772701696, 26202735265576293924864, 26226730444390924230656, 26232729239094581807104, 26235728636446410595328, 26235916098780899894592, 26235939531572711057000, 26235945389770663847602, 26235947342503314777778, 26235947423867175233202, 26235947428952416511666, 26235947428953658025650, 26235947428953662875314, 26235947428953663178418, 26235947428953663183154, 26235947428953663183191],
             [1, 2, 4, 5, 9, 14, 23, 37, 74, 148, 296, 592, 1184, 2368, 4736, 9472, 18944, 37888, 75776, 151552, 303104, 606208, 1212416, 2424832, 4849664, 9699328, 19398656, 38797312, 77594624, 155189248, 310378496, 620756992, 1241513984, 2483027968, 4966055936, 9932111872, 19864223744, 39728447488, 79456894976, 158913789952, 317827579904, 635655159808, 1271310319616, 2542620639232, 5085241278464, 10170482556928, 20340965113856, 40681930227712, 81363860455424, 162727720910848, 244091581366272, 488183162732544, 976366325465088, 1952732650930176, 2929098976395264, 2929098976395338, 5858197952790602, 11716395905581204, 17574593858371806, 29290989763953010, 46865583622324816, 76156573386277826, 123022157008602642, 199178730394880468, 398357460789760936, 796714921579521872, 1593429843159043744, 3186859686318087488, 6373719372636174976, 12747438745272349952, 25494877490544699904, 50989754981089399808, 101979509962178799616, 203959019924357599232, 407918039848715198464, 815836079697430396928, 1631672159394860793856, 3263344318789721587712, 6526688637579443175424, 13053377275158886350848, 26106754550317772701696, 26208734060279951501312, 26234228937770496201216, 26235822367613655244960, 26235945389770663847602, 26235947342503314777778, 26235947423867175233202, 26235947428952416511666, 26235947428953658025650, 26235947428953662875314, 26235947428953663178418, 26235947428953663183154, 26235947428953663183191],
             [1, 2, 4, 8, 16, 32, 64, 128, 256, 384, 400, 784, 1184, 2368, 4736, 9472, 18944, 28416, 28417, 56833, 85250, 142083, 284166, 568332, 1136664, 2273328, 4546656, 9093312, 18186624, 36373248, 72746496, 145492992, 290985984, 581971968, 1163943936, 2327887872, 4655775744, 9311551488, 18623102976, 37246205952, 74492411904, 148984823808, 297969647616, 595939295232, 1191878590464, 2383757180928, 4767514361856, 9535028723712, 19070057447424, 38140114894848, 76280229789696, 152560459579392, 305120919158784, 610241838317568, 1220483676635136, 2440967353270272, 4881934706540544, 9763869413081088, 19527738826162176, 39055477652324352, 78110955304648704, 156221910609297408, 312443821218594816, 624887642437189632, 1249775284874379264, 2499550569748758528, 4999101139497517056, 9998202278995034112, 19996404557990068224, 39992809115980136448, 79985618231960272896, 159971236463920545792, 319942472927841091584, 639884945855682183168, 1279769891711364366336, 2559539783422728732672, 5119079566845457465344, 10238159133690914930688, 20476318267381829861376, 25595397834227287326720, 26235282780082969509888, 26235907667725406699520, 26235946723203059023872, 26235947333444897341440, 26235947409725127131136, 26235947428795184578560, 26235947428944169402368, 26235947428953480953856, 26235947428953626446848, 26235947428953662820096, 26235947428953663104262, 26235947428953663161095, 26235947428953663180039, 26235947428953663182407, 26235947428953663183191],
             [1, 2, 4, 5, 9, 14, 23, 37, 74, 148, 296, 592, 1184, 2368, 4736, 9472, 18944, 37888, 75776, 151552, 303104, 606208, 1212416, 2424832, 4849664, 9699328, 19398656, 38797312, 77594624, 155189248, 310378496, 620756992, 1241513984, 2483027968, 4966055936, 9932111872, 19864223744, 39728447488, 79456894976, 158913789952, 317827579904, 635655159808, 1271310319616, 2542620639232, 5085241278464, 10170482556928, 20340965113856, 40681930227712, 81363860455424, 162727720910848, 244091581366272, 488183162732544, 976366325465088, 1952732650930176, 2929098976395264, 2929098976395338, 5858197952790602, 11716395905581204, 17574593858371806, 29290989763953010, 46865583622324816, 76156573386277826, 123022157008602642, 199178730394880468, 398357460789760936, 796714921579521872, 1593429843159043744, 3186859686318087488, 6373719372636174976, 12747438745272349952, 25494877490544699904, 50989754981089399808, 50989754981094249472, 101979509962183649280, 203959019924367298560, 407918039848734597120, 815836079697469194240, 1631672159394938388480, 3263344318789876776960, 6526688637579753553920, 13053377275159507107840, 26106754550319014215680, 26208734060281197864960, 26234228937771742564864, 26235822367614901608608, 26235945389771910211250, 26235947342504561141426, 26235947423868421596850, 26235947428953662875314, 26235947428953663178418, 26235947428953663183154, 26235947428953663183191],
             [1, 2, 4, 8, 16, 32, 64, 128, 192, 200, 392, 592, 1184, 2368, 4736, 9472, 18944, 37888, 75776, 151552, 303104, 606208, 1212416, 2424832, 4849664, 9699328, 19398656, 38797312, 77594624, 155189248, 310378496, 620756992, 1241513984, 2483027968, 4966055936, 9932111872, 19864223744, 39728447488, 79456894976, 158913789952, 317827579904, 635655159808, 1271310319616, 2542620639232, 5085241278464, 10170482556928, 20340965113856, 40681930227712, 81363860455424, 162727720910848, 325455441821696, 650910883643392, 1301821767286784, 2603643534573568, 5207287069147136, 10414574138294272, 20829148276588544, 41658296553177088, 83316593106354176, 124974889659531264, 249949779319062528, 499899558638125056, 999799117276250112, 1999598234552500224, 3999196469105000448, 7998392938210000896, 11997589407315001344, 19995982345525002240, 19995982345525021184, 19996145073245932032, 39992290146491864064, 79984580292983728128, 159969160585967456256, 319938321171934912512, 639876642343869825024, 1279753284687739650048, 2559506569375479300096, 2559506569375479300097, 2559506569375634489345, 5119013138751268978690, 5119013138751269016578, 10238026277502537995268, 15357039416253807011846, 25595065693756345007114, 26234942336100214832138, 26235942135217491082250, 26235947342504560229386, 26235947423868420684810, 26235947428953661963274, 26235947428953663175690, 26235947428953663180426, 26235947428953663182794, 26235947428953663183186, 26235947428953663183190, 26235947428953663183191],
             [1, 2, 4, 8, 16, 32, 64, 128, 256, 384, 400, 784, 1184, 2368, 4736, 9472, 18944, 28416, 28417, 56833, 85250, 142083, 284166, 568332, 1136664, 2273328, 4546656, 9093312, 18186624, 36373248, 72746496, 145492992, 290985984, 581971968, 1163943936, 2327887872, 4655775744, 9311551488, 18623102976, 37246205952, 74492411904, 148984823808, 297969647616, 595939295232, 1191878590464, 2383757180928, 4767514361856, 9535028723712, 19070057447424, 38140114894848, 76280229789696, 152560459579392, 305120919158784, 610241838317568, 1220483676635136, 2440967353270272, 4881934706540544, 9763869413081088, 19527738826162176, 39055477652324352, 78110955304648704, 156221910609297408, 312443821218594816, 624887642437189632, 1249775284874379264, 2499550569748758528, 4999101139497517056, 9998202278995034112, 19996404557990068224, 39992809115980136448, 79985618231960272896, 159971236463920545792, 319942472927841091584, 639884945855682183168, 1279769891711364366336, 1279769891711373459648, 2559539783422746919296, 5119079566845493838592, 10238159133690987677184, 20476318267381975354368, 25595397834227469192960, 26235282780083151376128, 26235907667725588565760, 26235946723203240890112, 26235947333445079207680, 26235947409725308997376, 26235947428795366444800, 26235947428944351268608, 26235947428953662820096, 26235947428953663104262, 26235947428953663161095, 26235947428953663180039, 26235947428953663182407, 26235947428953663183191],
             [1, 2, 4, 5, 9, 14, 23, 37, 74, 148, 296, 592, 1184, 2368, 4736, 9472, 18944, 37888, 75776, 151552, 303104, 606208, 1212416, 2424832, 4849664, 9699328, 19398656, 38797312, 77594624, 155189248, 310378496, 620756992, 1241513984, 2483027968, 4966055936, 9932111872, 19864223744, 39728447488, 79456894976, 158913789952, 317827579904, 635655159808, 1271310319616, 2542620639232, 5085241278464, 10170482556928, 20340965113856, 40681930227712, 81363860455424, 162727720910848, 325455441821696, 488183162732544, 976366325465088, 1952732650930176, 3905465301860352, 7810930603720704, 11716395905581056, 11716395905581352, 23432791811162408, 46865583622324816, 93731167244649632, 187462334489299264, 374924668978598528, 749849337957197056, 1499698675914394112, 2999397351828788224, 5998794703657576448, 11997589407315152896, 23995178814630305792, 26994576166459094016, 50989754981089399808, 50989754981094249472, 101979509962183649280, 203959019924367298560, 407918039848734597120, 815836079697469194240, 1631672159394938388480, 3263344318789876776960, 6526688637579753553920, 13053377275159507107840, 26106754550319014215680, 26208734060281197864960, 26235728636447656958976, 26235916098782146258240, 26235939531573957420648, 26235947342504561141352, 26235947423868421596776, 26235947428953662875240, 26235947428953663178344, 26235947428953663183080, 26235947428953663183154, 26235947428953663183191],
             [1, 2, 4, 8, 16, 32, 64, 128, 256, 384, 400, 784, 1184, 2368, 4736, 9472, 18944, 28416, 28417, 56833, 85250, 142083, 284166, 568332, 1136664, 2273328, 4546656, 9093312, 18186624, 36373248, 72746496, 145492992, 290985984, 581971968, 1163943936, 2327887872, 4655775744, 9311551488, 18623102976, 37246205952, 74492411904, 148984823808, 297969647616, 595939295232, 1191878590464, 2383757180928, 4767514361856, 9535028723712, 19070057447424, 38140114894848, 76280229789696, 152560459579392, 305120919158784, 610241838317568, 1220483676635136, 2440967353270272, 4881934706540544, 9763869413081088, 19527738826162176, 39055477652324352, 78110955304648704, 156221910609297408, 312443821218594816, 624887642437189632, 1249775284874379264, 2499550569748758528, 4999101139497517056, 9998202278995034112, 19996404557990068224, 39992809115980136448, 79985618231960272896, 159971236463920545792, 319942472927841091584, 639884945855682183168, 1279769891711364366336, 1279769891711373459648, 2559539783422746919296, 5119079566845493838592, 5119079585915551286016, 10238159171831102572032, 20476318343662205144064, 25595397929577756430080, 26235282875433438613248, 26235907763075875802880, 26235946818553528127232, 26235947428795366444800, 26235947428944351268608, 26235947428953662820096, 26235947428953663104262, 26235947428953663161095, 26235947428953663180039, 26235947428953663182407, 26235947428953663183191],
             [1, 2, 4, 8, 10, 11, 18, 36, 47, 55, 91, 109, 117, 226, 343, 434, 489, 499, 933, 1422, 2844, 5688, 5689, 11378, 22756, 45512, 91024, 182048, 364096, 728192, 1456384, 2912768, 5825536, 11651072, 23302144, 46604288, 93208576, 186417152, 372834304, 372835237, 745670474, 1491340948, 2982681896, 5965363792, 11930727584, 23861455168, 47722910336, 95445820672, 190891641344, 190891641461, 381783282922, 763566565844, 1527133131688, 3054266263376, 6108532526752, 12217065053504, 24434130107008, 48868260214016, 97736520428032, 195473040856064, 390946081712128, 781892163424256, 781892163424303, 1563784326848606, 3127568653697212, 6255137307394424, 12510274614788848, 25020549229577696, 50041098459155392, 100082196918310784, 200164393836621568, 400328787673243136, 800657575346486272, 1601315150692972544, 3202630301385945088, 6405260602771890176, 12810521205543780352, 12810521205543780851, 25621042411087561702, 51242084822175123404, 102484169644350246808, 204968339288700493616, 409936678577400987232, 819873357154801974464, 1639746714309603948928, 3279493428619207897856, 6558986857238415795712, 13117973714476831591424, 26235947428953663182848, 26235947428953663183191]]
    monsters = []
    for ch in elites:
        monsters.append(Chainfinder(chain_to_links(ch)))
    for _ in range(pop_size-len(monsters)):
        monsters.append(Chainfinder())
    print("Spawned elites!")
    print("best:", max(monsters).fitness())
    return monsters

def combine_pops(pops, pop_size):
    megap = []
    for p in pops:
        megap += p
    return random.sample(megap, pop_size)



def evol(thrd_nm="", mutex=False):
    if not mutex:
        mutex = Lock()
    tpg = 80 # tournaments per gen
    mpg = 10 # mutations per gen
    mp = 0.6 # mutation probability
    ldp = 1 # probability that loser dies in tournament
    pop_size = 300
    stagnation = 20
    target_fitness = 85
    tries = 1 # 0 to go until target (may result in infinite loop)
    pops = []
    curr_best = 715517
    chain = []
    i = 0
    while True:
        pops.append(generate_population(pop_size, mutex))
        #pops.append(elite_population(pop_size))
        pop_name = "Population #"+str(i+1)
        if thrd_nm:
            pop_name = thrd_nm+": "+pop_name
        pops[i] = evolve_population(pop_name, pops[i], mutex, pop_size, tpg, mpg, ldp, mp, stagnation, target_fitness)
        fitn = max(pops[-1]).fitness()
        if fitn < curr_best:
            curr_best = 0+fitn
            chain = max(pops[-1]).get_chain()
            if fitn <= target_fitness:
                return chain
        i += 1
        if tries != 0 and i == tries:
            print("Enough trying, I give up")
            break
    return chain


def crunch(thread_count):
    threads = []
    mutex = Lock()
    for i in range(thread_count):
        threads.append(Thread(target=evol, args=("Thread "+str(i+1), mutex)))
        threads[-1].start()


def main():
    chain = evol()
    print("\n\n")
    if verify_chain(N, chain):
        print("Results with evolutionary method:")
        print_chain_l(chain)
    else:
        raise Exception("evolutionary method is broken")
    chain = binary_method(N)
    if verify_chain(N, chain):
        print("Results with binary method:")
        print_chain_l(chain)
    else:
        raise Exception("binary method is broken")
    chain = modulus_method(N, 8)
    if verify_chain(N, chain):
        print("Results with modulus method:")
        print_chain_l(chain)
    else:
        raise Exception("modulus method is broken")
    print("Lower bound for l("+str(N)+") = "+str(lower_bound(N)))


main()
#evol()
#crunch(4)
